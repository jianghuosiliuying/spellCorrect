!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
ALIGNAS	json/json_value.cpp	71;"	d	file:
ALIGNAS	json/json_value.cpp	73;"	d	file:
Acceptor	Acceptor.cc	/^Acceptor::Acceptor(const string & ip, unsigned short port)$/;"	f	class:mm::Acceptor
Acceptor	Acceptor.cc	/^Acceptor::Acceptor(unsigned short port)$/;"	f	class:mm::Acceptor
All	json/json_writer.cpp	/^    All   \/\/\/< Keep all comments.$/;"	e	enum:Json::CommentStyle::Enum	file:
BuiltStyledStreamWriter	json/json_writer.cpp	/^BuiltStyledStreamWriter::BuiltStyledStreamWriter(String indentation,$/;"	f	class:Json::BuiltStyledStreamWriter
BuiltStyledStreamWriter	json/json_writer.cpp	/^struct BuiltStyledStreamWriter : public StreamWriter {$/;"	s	namespace:Json	file:
CXX	Makefile	/^CXX:=g++$/;"	m
CXXFLAGS	Makefile	/^CXXFLAGS:= -w -g  $(addprefix -I, $(INC_DIR)) $(LIBS) $/;"	m
CZString	json/json_value.cpp	/^Value::CZString::CZString(ArrayIndex index) : cstr_(nullptr), index_(index) {}$/;"	f	class:Json::Value::CZString
CZString	json/json_value.cpp	/^Value::CZString::CZString(CZString&& other)$/;"	f	class:Json::Value::CZString
CZString	json/json_value.cpp	/^Value::CZString::CZString(char const* str,$/;"	f	class:Json::Value::CZString
CZString	json/json_value.cpp	/^Value::CZString::CZString(const CZString& other) {$/;"	f	class:Json::Value::CZString
Cache	Cache.cc	/^Cache::Cache(unordered_map<string,string> & mainMap)$/;"	f	class:mm::Cache
Char	json/json_reader.cpp	/^  typedef char Char;$/;"	t	class:Json::OurReader	file:
CharReaderBuilder	json/json_reader.cpp	/^CharReaderBuilder::CharReaderBuilder() { setDefaults(&settings_); }$/;"	f	class:Json::CharReaderBuilder
CharReaderPtr	json/json_reader.cpp	/^typedef std::unique_ptr<CharReader> CharReaderPtr;$/;"	t	namespace:Json	file:
ChildValues	json/json_writer.cpp	/^  typedef std::vector<String> ChildValues;$/;"	t	struct:Json::BuiltStyledStreamWriter	file:
CommentStyle	json/json_writer.cpp	/^struct CommentStyle {$/;"	s	namespace:Json	file:
Comments	json/json_value.cpp	/^Value::Comments::Comments(Comments&& that)$/;"	f	class:Json::Value::Comments
Comments	json/json_value.cpp	/^Value::Comments::Comments(const Comments& that)$/;"	f	class:Json::Value::Comments
Condition	Condition.cc	/^Condition::Condition(MutexLock & mutex)$/;"	f	class:mm::Condition
DictProducer	DictProducer.cc	/^DictProducer::DictProducer(const string & dir)$/;"	f	class:mm::DictProducer
EXE	Makefile	/^EXE:=.\/server.exe$/;"	m
Enum	json/json_writer.cpp	/^  enum Enum {$/;"	g	struct:Json::CommentStyle	file:
ErrorInfo	json/json_reader.cpp	/^  class ErrorInfo {$/;"	c	class:Json::OurReader	file:
Errors	json/json_reader.cpp	/^  typedef std::deque<ErrorInfo> Errors;$/;"	t	class:Json::OurReader	file:
EventLoop	EventLoop.cc	/^EventLoop::EventLoop(Acceptor & acceptor)$/;"	f	class:mm::EventLoop
Exception	json/json_value.cpp	/^Exception::Exception(String msg) : msg_(std::move(msg)) {}$/;"	f	class:Json::Exception
INC_DIR	Makefile	/^INC_DIR:= .\/$/;"	m
InRange	json/json_value.cpp	/^static inline bool InRange(double d, T min, U max) {$/;"	f	namespace:Json
IndexProducer	IndexProducer.cc	/^IndexProducer::IndexProducer(const string& dicpath,const string& indexpath)$/;"	f	class:mm::IndexProducer
InetAddress	InetAddress.cc	/^InetAddress::InetAddress(const string & ip, unsigned short port)$/;"	f	class:mm::InetAddress
InetAddress	InetAddress.cc	/^InetAddress::InetAddress(const struct sockaddr_in & addr)$/;"	f	class:mm::InetAddress
InetAddress	InetAddress.cc	/^InetAddress::InetAddress(unsigned short port)$/;"	f	class:mm::InetAddress
IsIntegral	json/json_value.cpp	/^static bool IsIntegral(double d) {$/;"	f	namespace:Json
JSONCPP_DEPRECATED_STACK_LIMIT	json/json_reader.cpp	45;"	d	file:
JSON_ASSERT_UNREACHABLE	json/json_value.cpp	54;"	d	file:
Json	json/json_reader.cpp	/^namespace Json {$/;"	n	file:
Json	json/json_value.cpp	/^namespace Json {$/;"	n	file:
Json	json/json_writer.cpp	/^namespace Json {$/;"	n	file:
LIBS	Makefile	/^LIBS:= -lpthread$/;"	m
Location	json/json_reader.cpp	/^  typedef const Char* Location;$/;"	t	class:Json::OurReader	file:
LogicError	json/json_value.cpp	/^LogicError::LogicError(String const& msg) : Exception(msg) {}$/;"	f	class:Json::LogicError
Most	json/json_writer.cpp	/^    Most, \/\/\/< Recover odd behavior of previous versions (not implemented yet).$/;"	e	enum:Json::CommentStyle::Enum	file:
MutexLock	MutexLock.cc	/^MutexLock::MutexLock()$/;"	f	class:mm::MutexLock
MyTask	MyTask.cc	/^MyTask::MyTask(const string & msg,const mm::TcpConnectionPtr & conn)$/;"	f	class:mm::MyTask
Nodes	json/json_reader.cpp	/^  typedef std::stack<Value*> Nodes;$/;"	t	class:Json::OurReader	file:
None	json/json_writer.cpp	/^    None, \/\/\/< Drop all comments.$/;"	e	enum:Json::CommentStyle::Enum	file:
Num_	Thread.cc	/^    int Num_;$/;"	m	struct:mm::ThreadData	file:
OBJS	Makefile	/^OBJS:= $(patsubst %.cc, %.o, $(SRCS))$/;"	m
OurCharReader	json/json_reader.cpp	/^  OurCharReader(bool collectComments, OurFeatures const& features)$/;"	f	class:Json::OurCharReader
OurCharReader	json/json_reader.cpp	/^class OurCharReader : public CharReader {$/;"	c	namespace:Json	file:
OurFeatures	json/json_reader.cpp	/^class OurFeatures {$/;"	c	namespace:Json	file:
OurReader	json/json_reader.cpp	/^OurReader::OurReader(OurFeatures const& features)$/;"	f	class:Json::OurReader
OurReader	json/json_reader.cpp	/^class OurReader {$/;"	c	namespace:Json	file:
Path	json/json_value.cpp	/^Path::Path(const String& path,$/;"	f	class:Json::Path
PathArgument	json/json_value.cpp	/^PathArgument::PathArgument() : key_() {}$/;"	f	class:Json::PathArgument
PathArgument	json/json_value.cpp	/^PathArgument::PathArgument(ArrayIndex index)$/;"	f	class:Json::PathArgument
PathArgument	json/json_value.cpp	/^PathArgument::PathArgument(const String& key)$/;"	f	class:Json::PathArgument
PathArgument	json/json_value.cpp	/^PathArgument::PathArgument(const char* key)$/;"	f	class:Json::PathArgument
Reader	json/json_reader.cpp	/^Reader::Reader()$/;"	f	class:Json::Reader
Reader	json/json_reader.cpp	/^Reader::Reader(const Features& features)$/;"	f	class:Json::Reader
RuntimeError	json/json_value.cpp	/^RuntimeError::RuntimeError(String const& msg) : Exception(msg) {}$/;"	f	class:Json::RuntimeError
SRCS	Makefile	/^SRCS:=$(wildcard *.cc)$/;"	m
SRC_DIR	Makefile	/^SRC_DIR:= .\/$/;"	m
Socket	Socket.cc	/^Socket::Socket()$/;"	f	class:mm::Socket
Socket	Socket.cc	/^Socket::Socket(int fd)$/;"	f	class:mm::Socket
SocketIO	SocketIO.cc	/^SocketIO::SocketIO(int fd)$/;"	f	class:mm::SocketIO
SpellcorrectServer	SpellCorrectServer.cc	/^SpellcorrectServer::SpellcorrectServer(const string & conffileName)$/;"	f	class:mm::SpellcorrectServer
StreamWriter	json/json_writer.cpp	/^StreamWriter::StreamWriter() : sout_(nullptr) {}$/;"	f	class:Json::StreamWriter
StreamWriterBuilder	json/json_writer.cpp	/^StreamWriterBuilder::StreamWriterBuilder() { setDefaults(&settings_); }$/;"	f	class:Json::StreamWriterBuilder
StreamWriterPtr	json/json_writer.cpp	/^typedef std::unique_ptr<StreamWriter> StreamWriterPtr;$/;"	t	namespace:Json	file:
StructuredError	json/json_reader.cpp	/^  struct StructuredError {$/;"	s	class:Json::OurReader	file:
StyledStreamWriter	json/json_writer.cpp	/^StyledStreamWriter::StyledStreamWriter(String indentation)$/;"	f	class:Json::StyledStreamWriter
TaskQueue	TaskQueue.cc	/^TaskQueue::TaskQueue(size_t sz)$/;"	f	class:mm::TaskQueue
TcpConnection	TcpConnection.cc	/^TcpConnection::TcpConnection(int fd, EventLoop * loop)$/;"	f	class:mm::TcpConnection
TcpServer	TcpServer.cc	/^TcpServer::TcpServer(const string & ip, unsigned short port)$/;"	f	class:mm::TcpServer
Thread	Thread.cc	/^Thread::Thread(ThreadCallback && cb,int Num)$/;"	f	class:mm::Thread
ThreadData	Thread.cc	/^    ThreadData(const int Num,ThreadCallback cb)$/;"	f	struct:mm::ThreadData
ThreadData	Thread.cc	/^struct ThreadData$/;"	s	namespace:mm	file:
Threadpool	Threadpool.cc	/^Threadpool::Threadpool(size_t Num, size_t queSize)$/;"	f	class:mm::Threadpool
Token	json/json_reader.cpp	/^  class Token {$/;"	c	class:Json::OurReader	file:
TokenType	json/json_reader.cpp	/^  enum TokenType {$/;"	g	class:Json::OurReader	file:
Value	json/json_value.cpp	/^Value::Value(Int value) {$/;"	f	class:Json::Value
Value	json/json_value.cpp	/^Value::Value(Int64 value) {$/;"	f	class:Json::Value
Value	json/json_value.cpp	/^Value::Value(UInt value) {$/;"	f	class:Json::Value
Value	json/json_value.cpp	/^Value::Value(UInt64 value) {$/;"	f	class:Json::Value
Value	json/json_value.cpp	/^Value::Value(Value&& other) {$/;"	f	class:Json::Value
Value	json/json_value.cpp	/^Value::Value(ValueType type) {$/;"	f	class:Json::Value
Value	json/json_value.cpp	/^Value::Value(bool value) {$/;"	f	class:Json::Value
Value	json/json_value.cpp	/^Value::Value(const CppTL::ConstString& value) {$/;"	f	class:Json::Value
Value	json/json_value.cpp	/^Value::Value(const StaticString& value) {$/;"	f	class:Json::Value
Value	json/json_value.cpp	/^Value::Value(const String& value) {$/;"	f	class:Json::Value
Value	json/json_value.cpp	/^Value::Value(const Value& other) {$/;"	f	class:Json::Value
Value	json/json_value.cpp	/^Value::Value(const char* begin, const char* end) {$/;"	f	class:Json::Value
Value	json/json_value.cpp	/^Value::Value(const char* value) {$/;"	f	class:Json::Value
Value	json/json_value.cpp	/^Value::Value(double value) {$/;"	f	class:Json::Value
_CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES	json/json_reader.cpp	33;"	d	file:
_CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES	json/json_writer.cpp	46;"	d	file:
accept	Acceptor.cc	/^int Acceptor::accept()$/;"	f	class:mm::Acceptor
addChildValues_	json/json_writer.cpp	/^  bool addChildValues_ : 1;$/;"	m	struct:Json::BuiltStyledStreamWriter	file:
addComment	json/json_reader.cpp	/^void OurReader::addComment(Location begin,$/;"	f	class:Json::OurReader
addComment	json/json_reader.cpp	/^void Reader::addComment(Location begin,$/;"	f	class:Json::Reader
addElement	Cache.cc	/^void Cache::addElement(string word,string json)$/;"	f	class:mm::Cache
addEpollFdRead	EventLoop.cc	/^void EventLoop::addEpollFdRead(int fd)$/;"	f	class:mm::EventLoop
addError	json/json_reader.cpp	/^bool OurReader::addError(const String& message, Token& token, Location extra) {$/;"	f	class:Json::OurReader
addError	json/json_reader.cpp	/^bool Reader::addError(const String& message, Token& token, Location extra) {$/;"	f	class:Json::Reader
addErrorAndRecover	json/json_reader.cpp	/^bool OurReader::addErrorAndRecover(const String& message,$/;"	f	class:Json::OurReader
addErrorAndRecover	json/json_reader.cpp	/^bool Reader::addErrorAndRecover(const String& message,$/;"	f	class:Json::Reader
addPathInArg	json/json_value.cpp	/^void Path::addPathInArg(const String& \/*path*\/,$/;"	f	class:Json::Path
addTask	Threadpool.cc	/^void Threadpool::addTask(Task && task)$/;"	f	class:mm::Threadpool
all	json/json_reader.cpp	/^Features Features::all() { return {}; }$/;"	f	class:Json::Features
all	json/json_reader.cpp	/^OurFeatures OurFeatures::all() { return {}; }$/;"	f	class:Json::OurFeatures
allowComments_	json/json_reader.cpp	/^  bool allowComments_;$/;"	m	class:Json::OurFeatures	file:
allowDroppedNullPlaceholders_	json/json_reader.cpp	/^  bool allowDroppedNullPlaceholders_;$/;"	m	class:Json::OurFeatures	file:
allowNumericKeys_	json/json_reader.cpp	/^  bool allowNumericKeys_;$/;"	m	class:Json::OurFeatures	file:
allowSingleQuotes_	json/json_reader.cpp	/^  bool allowSingleQuotes_;$/;"	m	class:Json::OurFeatures	file:
allowSpecialFloats_	json/json_reader.cpp	/^  bool allowSpecialFloats_;$/;"	m	class:Json::OurFeatures	file:
append	json/json_value.cpp	/^Value& Value::append(Value&& value) {$/;"	f	class:Json::Value
append	json/json_value.cpp	/^Value& Value::append(const Value& value) { return (*this)[size()] = value; }$/;"	f	class:Json::Value
asBool	json/json_value.cpp	/^bool Value::asBool() const {$/;"	f	class:Json::Value
asCString	json/json_value.cpp	/^const char* Value::asCString() const {$/;"	f	class:Json::Value
asConstString	json/json_value.cpp	/^CppTL::ConstString Value::asConstString() const {$/;"	f	class:Json::Value
asDouble	json/json_value.cpp	/^double Value::asDouble() const {$/;"	f	class:Json::Value
asFloat	json/json_value.cpp	/^float Value::asFloat() const {$/;"	f	class:Json::Value
asInt	json/json_value.cpp	/^Value::Int Value::asInt() const {$/;"	f	class:Json::Value
asInt64	json/json_value.cpp	/^Value::Int64 Value::asInt64() const {$/;"	f	class:Json::Value
asLargestInt	json/json_value.cpp	/^LargestInt Value::asLargestInt() const {$/;"	f	class:Json::Value
asLargestUInt	json/json_value.cpp	/^LargestUInt Value::asLargestUInt() const {$/;"	f	class:Json::Value
asString	json/json_value.cpp	/^String Value::asString() const {$/;"	f	class:Json::Value
asUInt	json/json_value.cpp	/^Value::UInt Value::asUInt() const {$/;"	f	class:Json::Value
asUInt64	json/json_value.cpp	/^Value::UInt64 Value::asUInt64() const {$/;"	f	class:Json::Value
begin	json/json_value.cpp	/^Value::const_iterator Value::begin() const {$/;"	f	class:Json::Value
begin	json/json_value.cpp	/^Value::iterator Value::begin() {$/;"	f	class:Json::Value
begin_	json/json_reader.cpp	/^  Location begin_;$/;"	m	class:Json::OurReader	file:
bind	Acceptor.cc	/^void Acceptor::bind()$/;"	f	class:mm::Acceptor
build_dict	DictProducer.cc	/^void DictProducer::build_dict()$/;"	f	class:mm::DictProducer
build_index	IndexProducer.cc	/^void IndexProducer::build_index()$/;"	f	class:mm::IndexProducer
cb_	Thread.cc	/^    ThreadCallback cb_;$/;"	m	struct:mm::ThreadData	file:
childValues_	json/json_writer.cpp	/^  ChildValues childValues_;$/;"	m	struct:Json::BuiltStyledStreamWriter	file:
clear	json/json_value.cpp	/^void Value::clear() {$/;"	f	class:Json::Value
cloneUnique	json/json_value.cpp	/^static std::unique_ptr<T> cloneUnique(const std::unique_ptr<T>& p) {$/;"	f	namespace:Json
collectComments_	json/json_reader.cpp	/^  bool collectComments_;$/;"	m	class:Json::OurReader	file:
collectComments_	json/json_reader.cpp	/^  bool const collectComments_;$/;"	m	class:Json::OurCharReader	file:
colonSymbol_	json/json_writer.cpp	/^  String colonSymbol_;$/;"	m	struct:Json::BuiltStyledStreamWriter	file:
commentsBefore_	json/json_reader.cpp	/^  String commentsBefore_;$/;"	m	class:Json::OurReader	file:
compare	json/json_value.cpp	/^int Value::compare(const Value& other) const {$/;"	f	class:Json::Value
containsNewLine	json/json_reader.cpp	/^bool OurReader::containsNewLine(OurReader::Location begin,$/;"	f	class:Json::OurReader
containsNewLine	json/json_reader.cpp	/^bool Reader::containsNewLine(Reader::Location begin, Reader::Location end) {$/;"	f	class:Json::Reader
copy	json/json_value.cpp	/^void Value::copy(const Value& other) {$/;"	f	class:Json::Value
copyPayload	json/json_value.cpp	/^void Value::copyPayload(const Value& other) {$/;"	f	class:Json::Value
createCacheManger	CacheManger.cc	/^CacheManger * CacheManger::createCacheManger()$/;"	f	class:mm::CacheManger
createConfiguration	Configuration.cc	/^Configuration * Configuration::createConfiguration()$/;"	f	class:mm::Configuration
createEpollFd	EventLoop.cc	/^int EventLoop::createEpollFd()$/;"	f	class:mm::EventLoop
createEventFd	EventLoop.cc	/^int EventLoop::createEventFd()$/;"	f	class:mm::EventLoop
createJson	MyTask.cc	/^void MyTask::createJson(string & response)\/\/建立json$/;"	f	class:mm::MyTask
createMydict	Mydict.cc	/^Mydict * Mydict::createMydict()$/;"	f	class:mm::Mydict
createTimerFd	EventLoop.cc	/^int EventLoop::createTimerFd()$/;"	f	class:mm::EventLoop
createTimerfd	Timer.cc	/^int Timer::createTimerfd()$/;"	f	class:mm::Timer
cs_	json/json_writer.cpp	/^  CommentStyle::Enum cs_;$/;"	m	struct:Json::BuiltStyledStreamWriter	file:
currentValue	json/json_reader.cpp	/^Value& OurReader::currentValue() { return *(nodes_.top()); }$/;"	f	class:Json::OurReader
currentValue	json/json_reader.cpp	/^Value& Reader::currentValue() { return *(nodes_.top()); }$/;"	f	class:Json::Reader
current_	json/json_reader.cpp	/^  Location current_;$/;"	m	class:Json::OurReader	file:
data	json/json_value.cpp	/^const char* Value::CZString::data() const { return cstr_; }$/;"	f	class:Json::Value::CZString
decodeDouble	json/json_reader.cpp	/^bool OurReader::decodeDouble(Token& token) {$/;"	f	class:Json::OurReader
decodeDouble	json/json_reader.cpp	/^bool OurReader::decodeDouble(Token& token, Value& decoded) {$/;"	f	class:Json::OurReader
decodeDouble	json/json_reader.cpp	/^bool Reader::decodeDouble(Token& token) {$/;"	f	class:Json::Reader
decodeDouble	json/json_reader.cpp	/^bool Reader::decodeDouble(Token& token, Value& decoded) {$/;"	f	class:Json::Reader
decodeNumber	json/json_reader.cpp	/^bool OurReader::decodeNumber(Token& token) {$/;"	f	class:Json::OurReader
decodeNumber	json/json_reader.cpp	/^bool OurReader::decodeNumber(Token& token, Value& decoded) {$/;"	f	class:Json::OurReader
decodeNumber	json/json_reader.cpp	/^bool Reader::decodeNumber(Token& token) {$/;"	f	class:Json::Reader
decodeNumber	json/json_reader.cpp	/^bool Reader::decodeNumber(Token& token, Value& decoded) {$/;"	f	class:Json::Reader
decodePrefixedString	json/json_value.cpp	/^inline static void decodePrefixedString(bool isPrefixed,$/;"	f	namespace:Json
decodeString	json/json_reader.cpp	/^bool OurReader::decodeString(Token& token) {$/;"	f	class:Json::OurReader
decodeString	json/json_reader.cpp	/^bool OurReader::decodeString(Token& token, String& decoded) {$/;"	f	class:Json::OurReader
decodeString	json/json_reader.cpp	/^bool Reader::decodeString(Token& token) {$/;"	f	class:Json::Reader
decodeString	json/json_reader.cpp	/^bool Reader::decodeString(Token& token, String& decoded) {$/;"	f	class:Json::Reader
decodeUnicodeCodePoint	json/json_reader.cpp	/^bool OurReader::decodeUnicodeCodePoint(Token& token,$/;"	f	class:Json::OurReader
decodeUnicodeCodePoint	json/json_reader.cpp	/^bool Reader::decodeUnicodeCodePoint(Token& token,$/;"	f	class:Json::Reader
decodeUnicodeEscapeSequence	json/json_reader.cpp	/^bool OurReader::decodeUnicodeEscapeSequence(Token& token,$/;"	f	class:Json::OurReader
decodeUnicodeEscapeSequence	json/json_reader.cpp	/^bool Reader::decodeUnicodeEscapeSequence(Token& token,$/;"	f	class:Json::Reader
defaultRealPrecision	json/json_value.cpp	/^const UInt Value::defaultRealPrecision = 17;$/;"	m	class:Json::Value	file:
delEpollFdRead	EventLoop.cc	/^void EventLoop::delEpollFdRead(int fd)$/;"	f	class:mm::EventLoop
demand	json/json_value.cpp	/^Value* Value::demand(char const* begin, char const* end) {$/;"	f	class:Json::Value
destory	CacheManger.cc	/^void CacheManger::destory()$/;"	f	class:mm::CacheManger
destory	Mydict.cc	/^void Mydict::destory()$/;"	f	class:mm::Mydict
destroy	Configuration.cc	/^void Configuration::destroy()$/;"	f	class:mm::Configuration
distance	MyTask.cc	/^int MyTask::distance(const string & word2)\/\/计算最小编辑距离$/;"	f	class:mm::MyTask
doPendingFunctors	EventLoop.cc	/^void EventLoop::doPendingFunctors()$/;"	f	class:mm::EventLoop
document_	json/json_reader.cpp	/^  String document_;$/;"	m	class:Json::OurReader	file:
dropNullPlaceholders	json/json_writer.cpp	/^void FastWriter::dropNullPlaceholders() { dropNullPlaceholders_ = true; }$/;"	f	class:Json::FastWriter
dupMeta	json/json_value.cpp	/^void Value::dupMeta(const Value& other) {$/;"	f	class:Json::Value
dupPayload	json/json_value.cpp	/^void Value::dupPayload(const Value& other) {$/;"	f	class:Json::Value
duplicateAndPrefixStringValue	json/json_value.cpp	/^static inline char* duplicateAndPrefixStringValue(const char* value,$/;"	f	namespace:Json
duplicateStringValue	json/json_value.cpp	/^static inline char* duplicateStringValue(const char* value, size_t length) {$/;"	f	namespace:Json
empty	TaskQueue.cc	/^bool TaskQueue::empty() const$/;"	f	class:mm::TaskQueue
empty	json/json_value.cpp	/^bool Value::empty() const {$/;"	f	class:Json::Value
enableYAMLCompatibility	json/json_writer.cpp	/^void FastWriter::enableYAMLCompatibility() { yamlCompatibilityEnabled_ = true; }$/;"	f	class:Json::FastWriter
end	json/json_value.cpp	/^Value::const_iterator Value::end() const {$/;"	f	class:Json::Value
end	json/json_value.cpp	/^Value::iterator Value::end() {$/;"	f	class:Json::Value
end_	json/json_reader.cpp	/^    Location end_;$/;"	m	class:Json::OurReader::Token	file:
end_	json/json_reader.cpp	/^  Location end_;$/;"	m	class:Json::OurReader	file:
endingLineFeedSymbol_	json/json_writer.cpp	/^  String endingLineFeedSymbol_;$/;"	m	struct:Json::BuiltStyledStreamWriter	file:
errors_	json/json_reader.cpp	/^  Errors errors_;$/;"	m	class:Json::OurReader	file:
extra_	json/json_reader.cpp	/^    Location extra_;$/;"	m	class:Json::OurReader::ErrorInfo	file:
failIfExtra_	json/json_reader.cpp	/^  bool failIfExtra_;$/;"	m	class:Json::OurFeatures	file:
fd	Socket.cc	/^int Socket::fd() const {	return _fd;	}$/;"	f	class:mm::Socket
features_	json/json_reader.cpp	/^  OurFeatures const features_;$/;"	m	class:Json::OurReader	file:
find	json/json_value.cpp	/^Value const* Value::find(char const* begin, char const* end) const {$/;"	f	class:Json::Value
full	TaskQueue.cc	/^bool TaskQueue::full() const$/;"	f	class:mm::TaskQueue
get	json/json_value.cpp	/^String Value::Comments::get(CommentPlacement slot) const {$/;"	f	class:Json::Value::Comments
get	json/json_value.cpp	/^Value Value::get(ArrayIndex index, const Value& defaultValue) const {$/;"	f	class:Json::Value
get	json/json_value.cpp	/^Value Value::get(String const& key, Value const& defaultValue) const {$/;"	f	class:Json::Value
get	json/json_value.cpp	/^Value Value::get(char const* begin,$/;"	f	class:Json::Value
get	json/json_value.cpp	/^Value Value::get(char const* key, Value const& defaultValue) const {$/;"	f	class:Json::Value
get	json/json_value.cpp	/^Value Value::get(const CppTL::ConstString& key,$/;"	f	class:Json::Value
getCStringLength	json/json_value.cpp	/^unsigned Value::getCStringLength() const {$/;"	f	class:Json::Value
getCache	CacheManger.cc	/^Cache & CacheManger::getCache(size_t idx)$/;"	f	class:mm::CacheManger
getCacheMap	Cache.cc	/^unordered_map<string,string> & Cache::getCacheMap()$/;"	f	class:mm::Cache
getComment	json/json_value.cpp	/^String Value::getComment(CommentPlacement placement) const {$/;"	f	class:Json::Value
getConfigMap	Configuration.cc	/^map<string,string> & Configuration::getConfigMap()$/;"	f	class:mm::Configuration
getDict	Mydict.cc	/^vector<pair<string,int> > & Mydict::getDict()$/;"	f	class:mm::Mydict
getFormatedErrorMessages	json/json_reader.cpp	/^String Reader::getFormatedErrorMessages() const {$/;"	f	class:Json::Reader
getFormattedErrorMessages	json/json_reader.cpp	/^String OurReader::getFormattedErrorMessages() const {$/;"	f	class:Json::OurReader
getFormattedErrorMessages	json/json_reader.cpp	/^String Reader::getFormattedErrorMessages() const {$/;"	f	class:Json::Reader
getIndexTable	Mydict.cc	/^map<string,set<int> > & Mydict::getIndexTable()$/;"	f	class:mm::Mydict
getLocalAddr	TcpConnection.cc	/^InetAddress TcpConnection::getLocalAddr()$/;"	f	class:mm::TcpConnection
getLocationLineAndColumn	json/json_reader.cpp	/^String OurReader::getLocationLineAndColumn(Location location) const {$/;"	f	class:Json::OurReader
getLocationLineAndColumn	json/json_reader.cpp	/^String Reader::getLocationLineAndColumn(Location location) const {$/;"	f	class:Json::Reader
getLocationLineAndColumn	json/json_reader.cpp	/^void OurReader::getLocationLineAndColumn(Location location,$/;"	f	class:Json::OurReader
getLocationLineAndColumn	json/json_reader.cpp	/^void Reader::getLocationLineAndColumn(Location location,$/;"	f	class:Json::Reader
getMemberNames	json/json_value.cpp	/^Value::Members Value::getMemberNames() const {$/;"	f	class:Json::Value
getNextChar	json/json_reader.cpp	/^OurReader::Char OurReader::getNextChar() {$/;"	f	class:Json::OurReader
getNextChar	json/json_reader.cpp	/^Reader::Char Reader::getNextChar() {$/;"	f	class:Json::Reader
getOffsetLimit	json/json_value.cpp	/^ptrdiff_t Value::getOffsetLimit() const { return limit_; }$/;"	f	class:Json::Value
getOffsetStart	json/json_value.cpp	/^ptrdiff_t Value::getOffsetStart() const { return start_; }$/;"	f	class:Json::Value
getPeerAddr	TcpConnection.cc	/^InetAddress TcpConnection::getPeerAddr()$/;"	f	class:mm::TcpConnection
getString	json/json_value.cpp	/^bool Value::getString(char const** begin, char const** end) const {$/;"	f	class:Json::Value
getStructuredErrors	json/json_reader.cpp	/^std::vector<OurReader::StructuredError> OurReader::getStructuredErrors() const {$/;"	f	class:Json::OurReader
getStructuredErrors	json/json_reader.cpp	/^std::vector<Reader::StructuredError> Reader::getStructuredErrors() const {$/;"	f	class:Json::Reader
getTask	Threadpool.cc	/^Task Threadpool::getTask()$/;"	f	class:mm::Threadpool
getValidReaderKeys	json/json_reader.cpp	/^static void getValidReaderKeys(std::set<String>* valid_keys) {$/;"	f	namespace:Json
getValidWriterKeys	json/json_writer.cpp	/^static void getValidWriterKeys(std::set<String>* valid_keys) {$/;"	f	namespace:Json
good	json/json_reader.cpp	/^bool OurReader::good() const { return errors_.empty(); }$/;"	f	class:Json::OurReader
good	json/json_reader.cpp	/^bool Reader::good() const { return errors_.empty(); }$/;"	f	class:Json::Reader
handleCloseCallback	TcpConnection.cc	/^void TcpConnection::handleCloseCallback()$/;"	f	class:mm::TcpConnection
handleConnectionCallback	TcpConnection.cc	/^void TcpConnection::handleConnectionCallback()$/;"	f	class:mm::TcpConnection
handleMessage	EventLoop.cc	/^void EventLoop::handleMessage(int fd)$/;"	f	class:mm::EventLoop
handleMessageCallback	TcpConnection.cc	/^void TcpConnection::handleMessageCallback()$/;"	f	class:mm::TcpConnection
handleNewConnection	EventLoop.cc	/^void EventLoop::handleNewConnection()$/;"	f	class:mm::EventLoop
handleRead	Timer.cc	/^void Timer::handleRead()$/;"	f	class:mm::Timer
handleSendRead	EventLoop.cc	/^void EventLoop::handleSendRead()$/;"	f	class:mm::EventLoop
handleTimerRead	EventLoop.cc	/^void EventLoop::handleTimerRead()$/;"	f	class:mm::EventLoop
has	json/json_value.cpp	/^bool Value::Comments::has(CommentPlacement slot) const {$/;"	f	class:Json::Value::Comments
hasComment	json/json_value.cpp	/^bool Value::hasComment(CommentPlacement placement) const {$/;"	f	class:Json::Value
hasCommentForValue	json/json_writer.cpp	/^bool BuiltStyledStreamWriter::hasCommentForValue(const Value& value) {$/;"	f	class:Json::BuiltStyledStreamWriter
hasCommentForValue	json/json_writer.cpp	/^bool StyledStreamWriter::hasCommentForValue(const Value& value) {$/;"	f	class:Json::StyledStreamWriter
hasCommentForValue	json/json_writer.cpp	/^bool StyledWriter::hasCommentForValue(const Value& value) {$/;"	f	class:Json::StyledWriter
hex2	json/json_writer.cpp	/^static const char hex2[] = "000102030405060708090a0b0c0d0e0f"$/;"	m	namespace:Json	file:
indent	json/json_writer.cpp	/^void BuiltStyledStreamWriter::indent() { indentString_ += indentation_; }$/;"	f	class:Json::BuiltStyledStreamWriter
indent	json/json_writer.cpp	/^void StyledStreamWriter::indent() { indentString_ += indentation_; }$/;"	f	class:Json::StyledStreamWriter
indent	json/json_writer.cpp	/^void StyledWriter::indent() { indentString_ += String(indentSize_, ' '); }$/;"	f	class:Json::StyledWriter
indentString_	json/json_writer.cpp	/^  String indentString_;$/;"	m	struct:Json::BuiltStyledStreamWriter	file:
indentation_	json/json_writer.cpp	/^  String indentation_;$/;"	m	struct:Json::BuiltStyledStreamWriter	file:
indented_	json/json_writer.cpp	/^  bool indented_ : 1;$/;"	m	struct:Json::BuiltStyledStreamWriter	file:
index	json/json_value.cpp	/^ArrayIndex Value::CZString::index() const { return index_; }$/;"	f	class:Json::Value::CZString
init	CacheManger.cc	/^CacheManger * CacheManger::init() $/;"	f	class:mm::CacheManger
initBasic	json/json_value.cpp	/^void Value::initBasic(ValueType type, bool allocated) {$/;"	f	class:Json::Value
initConf	Configuration.cc	/^Configuration* Configuration::initConf(const string & filepath)$/;"	f	class:mm::Configuration
initEn	Mydict.cc	/^void Mydict::initEn(const string dictEnPath,const string indexEnPath)$/;"	f	class:mm::Mydict
integerToDouble	json/json_value.cpp	/^static inline double integerToDouble(Json::UInt64 value) {$/;"	f	namespace:Json
integerToDouble	json/json_value.cpp	/^template <typename T> static inline double integerToDouble(T value) {$/;"	f	namespace:Json
invalidPath	json/json_value.cpp	/^void Path::invalidPath(const String& \/*path*\/, int \/*location*\/) {$/;"	f	class:Json::Path
ip	InetAddress.cc	/^string InetAddress::ip() const$/;"	f	class:mm::InetAddress
isAnyCharRequiredQuoting	json/json_writer.cpp	/^static bool isAnyCharRequiredQuoting(char const* s, size_t n) {$/;"	f	namespace:Json
isArray	json/json_value.cpp	/^bool Value::isArray() const { return type() == arrayValue; }$/;"	f	class:Json::Value
isBool	json/json_value.cpp	/^bool Value::isBool() const { return type() == booleanValue; }$/;"	f	class:Json::Value
isConnectionClosed	EventLoop.cc	/^bool EventLoop::isConnectionClosed(int fd)$/;"	f	class:mm::EventLoop
isConvertibleTo	json/json_value.cpp	/^bool Value::isConvertibleTo(ValueType other) const {$/;"	f	class:Json::Value
isDouble	json/json_value.cpp	/^bool Value::isDouble() const {$/;"	f	class:Json::Value
isInt	json/json_value.cpp	/^bool Value::isInt() const {$/;"	f	class:Json::Value
isInt64	json/json_value.cpp	/^bool Value::isInt64() const {$/;"	f	class:Json::Value
isIntegral	json/json_value.cpp	/^bool Value::isIntegral() const {$/;"	f	class:Json::Value
isMember	json/json_value.cpp	/^bool Value::isMember(String const& key) const {$/;"	f	class:Json::Value
isMember	json/json_value.cpp	/^bool Value::isMember(char const* begin, char const* end) const {$/;"	f	class:Json::Value
isMember	json/json_value.cpp	/^bool Value::isMember(char const* key) const {$/;"	f	class:Json::Value
isMember	json/json_value.cpp	/^bool Value::isMember(const CppTL::ConstString& key) const {$/;"	f	class:Json::Value
isMultilineArray	json/json_writer.cpp	/^bool BuiltStyledStreamWriter::isMultilineArray(Value const& value) {$/;"	f	class:Json::BuiltStyledStreamWriter
isMultilineArray	json/json_writer.cpp	/^bool StyledStreamWriter::isMultilineArray(const Value& value) {$/;"	f	class:Json::StyledStreamWriter
isMultilineArray	json/json_writer.cpp	/^bool StyledWriter::isMultilineArray(const Value& value) {$/;"	f	class:Json::StyledWriter
isNull	json/json_value.cpp	/^bool Value::isNull() const { return type() == nullValue; }$/;"	f	class:Json::Value
isNumeric	json/json_value.cpp	/^bool Value::isNumeric() const { return isDouble(); }$/;"	f	class:Json::Value
isObject	json/json_value.cpp	/^bool Value::isObject() const { return type() == objectValue; }$/;"	f	class:Json::Value
isStaticString	json/json_value.cpp	/^bool Value::CZString::isStaticString() const {$/;"	f	class:Json::Value::CZString
isString	json/json_value.cpp	/^bool Value::isString() const { return type() == stringValue; }$/;"	f	class:Json::Value
isUInt	json/json_value.cpp	/^bool Value::isUInt() const {$/;"	f	class:Json::Value
isUInt64	json/json_value.cpp	/^bool Value::isUInt64() const {$/;"	f	class:Json::Value
isValidIndex	json/json_value.cpp	/^bool Value::isValidIndex(ArrayIndex index) const { return index < size(); }$/;"	f	class:Json::Value
isfinite	json/json_writer.cpp	27;"	d	file:
isfinite	json/json_writer.cpp	42;"	d	file:
isfinite	json/json_writer.cpp	54;"	d	file:
isfinite	json/json_writer.cpp	61;"	d	file:
isfinite	json/json_writer.cpp	74;"	d	file:
isnan	json/json_writer.cpp	23;"	d	file:
isnan	json/json_writer.cpp	37;"	d	file:
isnan	json/json_writer.cpp	69;"	d	file:
join	Thread.cc	/^void Thread::join()$/;"	f	class:mm::Thread
lastValueEnd_	json/json_reader.cpp	/^  Location lastValueEnd_;$/;"	m	class:Json::OurReader	file:
lastValue_	json/json_reader.cpp	/^  Value* lastValue_;$/;"	m	class:Json::OurReader	file:
length	json/json_value.cpp	/^unsigned Value::CZString::length() const { return storage_.length_; }$/;"	f	class:Json::Value::CZString
listen	Acceptor.cc	/^void Acceptor::listen()$/;"	f	class:mm::Acceptor
lock	MutexLock.cc	/^void MutexLock::lock()$/;"	f	class:mm::MutexLock
loop	EventLoop.cc	/^void EventLoop::loop()$/;"	f	class:mm::EventLoop
main	TestSpellCorrectServer.cc	/^int main()$/;"	f
make	json/json_value.cpp	/^Value& Path::make(Value& root) const {$/;"	f	class:Json::Path
makePath	json/json_value.cpp	/^void Path::makePath(const String& path, const InArgs& in) {$/;"	f	class:Json::Path
match	json/json_reader.cpp	/^bool OurReader::match(Location pattern, int patternLength) {$/;"	f	class:Json::OurReader
match	json/json_reader.cpp	/^bool Reader::match(Location pattern, int patternLength) {$/;"	f	class:Json::Reader
maxInt	json/json_value.cpp	/^const Int Value::maxInt = Int(UInt(-1) \/ 2);$/;"	m	class:Json::Value	file:
maxInt64	json/json_value.cpp	/^const Int64 Value::maxInt64 = Int64(UInt64(-1) \/ 2);$/;"	m	class:Json::Value	file:
maxLargestInt	json/json_value.cpp	/^const LargestInt Value::maxLargestInt = LargestInt(LargestUInt(-1) \/ 2);$/;"	m	class:Json::Value	file:
maxLargestUInt	json/json_value.cpp	/^const LargestUInt Value::maxLargestUInt = LargestUInt(-1);$/;"	m	class:Json::Value	file:
maxUInt	json/json_value.cpp	/^const UInt Value::maxUInt = UInt(-1);$/;"	m	class:Json::Value	file:
maxUInt64	json/json_value.cpp	/^const UInt64 Value::maxUInt64 = UInt64(-1);$/;"	m	class:Json::Value	file:
maxUInt64AsDouble	json/json_value.cpp	/^static const double maxUInt64AsDouble = 18446744073709551615.0;$/;"	m	namespace:Json	file:
message	json/json_reader.cpp	/^    String message;$/;"	m	struct:Json::OurReader::StructuredError	file:
message_	json/json_reader.cpp	/^    String message_;$/;"	m	class:Json::OurReader::ErrorInfo	file:
minInt	json/json_value.cpp	/^const Int Value::minInt = Int(~(UInt(-1) \/ 2));$/;"	m	class:Json::Value	file:
minInt64	json/json_value.cpp	/^const Int64 Value::minInt64 = Int64(~(UInt64(-1) \/ 2));$/;"	m	class:Json::Value	file:
minLargestInt	json/json_value.cpp	/^const LargestInt Value::minLargestInt = LargestInt(~(LargestUInt(-1) \/ 2));$/;"	m	class:Json::Value	file:
mm	Acceptor.cc	/^namespace mm$/;"	n	file:
mm	Cache.cc	/^namespace mm$/;"	n	file:
mm	CacheManger.cc	/^namespace mm$/;"	n	file:
mm	Condition.cc	/^namespace mm$/;"	n	file:
mm	Configuration.cc	/^namespace mm$/;"	n	file:
mm	DictProducer.cc	/^namespace mm$/;"	n	file:
mm	EventLoop.cc	/^namespace mm$/;"	n	file:
mm	IndexProducer.cc	/^namespace mm$/;"	n	file:
mm	InetAddress.cc	/^namespace mm$/;"	n	file:
mm	MutexLock.cc	/^namespace mm$/;"	n	file:
mm	MyTask.cc	/^namespace mm$/;"	n	file:
mm	Mydict.cc	/^namespace mm$/;"	n	file:
mm	Socket.cc	/^namespace mm$/;"	n	file:
mm	SocketIO.cc	/^namespace mm$/;"	n	file:
mm	SpellCorrectServer.cc	/^namespace mm$/;"	n	file:
mm	TaskQueue.cc	/^namespace mm$/;"	n	file:
mm	TcpConnection.cc	/^namespace mm$/;"	n	file:
mm	TcpServer.cc	/^namespace mm$/;"	n	file:
mm	Thread.cc	/^namespace mm$/;"	n	file:
mm	Threadpool.cc	/^namespace mm $/;"	n	file:
mm	Timer.cc	/^namespace mm$/;"	n	file:
msvc_pre1900_c99_snprintf	json/json_value.cpp	/^int JSON_API msvc_pre1900_c99_snprintf(char* outBuf,$/;"	f
msvc_pre1900_c99_vsnprintf	json/json_value.cpp	/^static int msvc_pre1900_c99_vsnprintf(char* outBuf,$/;"	f	file:
newCharReader	json/json_reader.cpp	/^CharReader* CharReaderBuilder::newCharReader() const {$/;"	f	class:Json::CharReaderBuilder
newStreamWriter	json/json_writer.cpp	/^StreamWriter* StreamWriterBuilder::newStreamWriter() const {$/;"	f	class:Json::StreamWriterBuilder
nodes_	json/json_reader.cpp	/^  Nodes nodes_;$/;"	m	class:Json::OurReader	file:
normalizeEOL	json/json_reader.cpp	/^String OurReader::normalizeEOL(OurReader::Location begin,$/;"	f	class:Json::OurReader
normalizeEOL	json/json_reader.cpp	/^String Reader::normalizeEOL(Reader::Location begin, Reader::Location end) {$/;"	f	class:Json::Reader
notify	Condition.cc	/^void Condition::notify()$/;"	f	class:mm::Condition
notifyAll	Condition.cc	/^void Condition::notifyAll()$/;"	f	class:mm::Condition
null	json/json_value.cpp	/^Value const& Value::null = Value::nullSingleton();$/;"	m	class:Json::Value	file:
nullRef	json/json_value.cpp	/^Value const& Value::nullRef = Value::nullSingleton();$/;"	m	class:Json::Value	file:
nullSingleton	json/json_value.cpp	/^Value const& Value::nullSingleton() {$/;"	f	class:Json::Value
nullSymbol_	json/json_writer.cpp	/^  String nullSymbol_;$/;"	m	struct:Json::BuiltStyledStreamWriter	file:
offset_limit	json/json_reader.cpp	/^    ptrdiff_t offset_limit;$/;"	m	struct:Json::OurReader::StructuredError	file:
offset_start	json/json_reader.cpp	/^    ptrdiff_t offset_start;$/;"	m	struct:Json::OurReader::StructuredError	file:
omitEndingLineFeed	json/json_writer.cpp	/^void FastWriter::omitEndingLineFeed() { omitEndingLineFeed_ = true; }$/;"	f	class:Json::FastWriter
onClose	SpellCorrectServer.cc	/^void SpellcorrectServer::onClose(const mm::TcpConnectionPtr & conn)$/;"	f	class:mm::SpellcorrectServer
onConnection	SpellCorrectServer.cc	/^void SpellcorrectServer::onConnection(const TcpConnectionPtr & conn)$/;"	f	class:mm::SpellcorrectServer
onMessage	SpellCorrectServer.cc	/^void SpellcorrectServer::onMessage(const TcpConnectionPtr & conn)$/;"	f	class:mm::SpellcorrectServer
operator !=	json/json_value.cpp	/^bool Value::operator!=(const Value& other) const { return !(*this == other); }$/;"	f	class:Json::Value
operator <	json/json_value.cpp	/^bool Value::CZString::operator<(const CZString& other) const {$/;"	f	class:Json::Value::CZString
operator <	json/json_value.cpp	/^bool Value::operator<(const Value& other) const {$/;"	f	class:Json::Value
operator <<	json/json_writer.cpp	/^OStream& operator<<(OStream& sout, Value const& root) {$/;"	f	namespace:Json
operator <=	json/json_value.cpp	/^bool Value::operator<=(const Value& other) const { return !(other < *this); }$/;"	f	class:Json::Value
operator =	json/json_value.cpp	/^Value& Value::operator=(Value&& other) {$/;"	f	class:Json::Value
operator =	json/json_value.cpp	/^Value& Value::operator=(const Value& other) {$/;"	f	class:Json::Value
operator =	json/json_value.cpp	/^Value::CZString& Value::CZString::operator=(CZString&& other) {$/;"	f	class:Json::Value::CZString
operator =	json/json_value.cpp	/^Value::CZString& Value::CZString::operator=(const CZString& other) {$/;"	f	class:Json::Value::CZString
operator =	json/json_value.cpp	/^Value::Comments& Value::Comments::operator=(Comments&& that) {$/;"	f	class:Json::Value::Comments
operator =	json/json_value.cpp	/^Value::Comments& Value::Comments::operator=(const Comments& that) {$/;"	f	class:Json::Value::Comments
operator ==	json/json_value.cpp	/^bool Value::CZString::operator==(const CZString& other) const {$/;"	f	class:Json::Value::CZString
operator ==	json/json_value.cpp	/^bool Value::operator==(const Value& other) const {$/;"	f	class:Json::Value
operator >	json/json_value.cpp	/^bool Value::operator>(const Value& other) const { return other < *this; }$/;"	f	class:Json::Value
operator >=	json/json_value.cpp	/^bool Value::operator>=(const Value& other) const { return !(*this < other); }$/;"	f	class:Json::Value
operator >>	json/json_reader.cpp	/^IStream& operator>>(IStream& sin, Value& root) {$/;"	f	namespace:Json
operator []	json/json_reader.cpp	/^Value& CharReaderBuilder::operator[](const String& key) {$/;"	f	class:Json::CharReaderBuilder
operator []	json/json_value.cpp	/^Value const& Value::operator[](CppTL::ConstString const& key) const {$/;"	f	class:Json::Value
operator []	json/json_value.cpp	/^Value const& Value::operator[](const String& key) const {$/;"	f	class:Json::Value
operator []	json/json_value.cpp	/^Value& Value::operator[](ArrayIndex index) {$/;"	f	class:Json::Value
operator []	json/json_value.cpp	/^Value& Value::operator[](const CppTL::ConstString& key) {$/;"	f	class:Json::Value
operator []	json/json_value.cpp	/^Value& Value::operator[](const StaticString& key) {$/;"	f	class:Json::Value
operator []	json/json_value.cpp	/^Value& Value::operator[](const String& key) {$/;"	f	class:Json::Value
operator []	json/json_value.cpp	/^Value& Value::operator[](const char* key) {$/;"	f	class:Json::Value
operator []	json/json_value.cpp	/^Value& Value::operator[](int index) {$/;"	f	class:Json::Value
operator []	json/json_value.cpp	/^const Value& Value::operator[](ArrayIndex index) const {$/;"	f	class:Json::Value
operator []	json/json_value.cpp	/^const Value& Value::operator[](const char* key) const {$/;"	f	class:Json::Value
operator []	json/json_value.cpp	/^const Value& Value::operator[](int index) const {$/;"	f	class:Json::Value
operator []	json/json_writer.cpp	/^Value& StreamWriterBuilder::operator[](const String& key) {$/;"	f	class:Json::StreamWriterBuilder
operator bool	json/json_value.cpp	/^Value::operator bool() const { return !isNull(); }$/;"	f	class:Json::Value
override	json/json_writer.cpp	/^  int write(Value const& root, OStream* sout) override;$/;"	m	struct:Json::BuiltStyledStreamWriter	file:
pCacheManger_	CacheManger.cc	/^CacheManger * CacheManger::pCacheManger_=createCacheManger();\/\/饱汉模式$/;"	m	class:mm::CacheManger	file:
pConf_	Configuration.cc	/^Configuration * Configuration::pConf_=createConfiguration();\/\/饱汉模式$/;"	m	class:mm::Configuration	file:
pMydict_	Mydict.cc	/^Mydict * Mydict::pMydict_=createMydict();\/\/饱汉模式$/;"	m	class:mm::Mydict	file:
parse	json/json_reader.cpp	/^bool OurReader::parse(const char* beginDoc,$/;"	f	class:Json::OurReader
parse	json/json_reader.cpp	/^bool Reader::parse(const char* beginDoc,$/;"	f	class:Json::Reader
parse	json/json_reader.cpp	/^bool Reader::parse(const std::string& document,$/;"	f	class:Json::Reader
parse	json/json_reader.cpp	/^bool Reader::parse(std::istream& is, Value& root, bool collectComments) {$/;"	f	class:Json::Reader
parseFromStream	json/json_reader.cpp	/^bool parseFromStream(CharReader::Factory const& fact,$/;"	f	namespace:Json
periodicUpdate	CacheManger.cc	/^void CacheManger::periodicUpdate()$/;"	f	class:mm::CacheManger
pop	TaskQueue.cc	/^ElemType TaskQueue::pop()$/;"	f	class:mm::TaskQueue
port	InetAddress.cc	/^unsigned short InetAddress::port() const$/;"	f	class:mm::InetAddress
precisionType_	json/json_writer.cpp	/^  PrecisionType precisionType_;$/;"	m	struct:Json::BuiltStyledStreamWriter	file:
precision_	json/json_writer.cpp	/^  unsigned int precision_;$/;"	m	struct:Json::BuiltStyledStreamWriter	file:
process	MyTask.cc	/^void MyTask::process()$/;"	f	class:mm::MyTask
push	TaskQueue.cc	/^void TaskQueue::push(ElemType elem)$/;"	f	class:mm::TaskQueue
pushError	json/json_reader.cpp	/^bool OurReader::pushError(const Value& value, const String& message) {$/;"	f	class:Json::OurReader
pushError	json/json_reader.cpp	/^bool OurReader::pushError(const Value& value,$/;"	f	class:Json::OurReader
pushError	json/json_reader.cpp	/^bool Reader::pushError(const Value& value, const String& message) {$/;"	f	class:Json::Reader
pushError	json/json_reader.cpp	/^bool Reader::pushError(const Value& value,$/;"	f	class:Json::Reader
pushValue	json/json_writer.cpp	/^void BuiltStyledStreamWriter::pushValue(String const& value) {$/;"	f	class:Json::BuiltStyledStreamWriter
pushValue	json/json_writer.cpp	/^void StyledStreamWriter::pushValue(const String& value) {$/;"	f	class:Json::StyledStreamWriter
pushValue	json/json_writer.cpp	/^void StyledWriter::pushValue(const String& value) {$/;"	f	class:Json::StyledWriter
queryIndexTable	MyTask.cc	/^void MyTask::queryIndexTable()\/\/查询索引$/;"	f	class:mm::MyTask
readArray	json/json_reader.cpp	/^bool OurReader::readArray(Token& token) {$/;"	f	class:Json::OurReader
readArray	json/json_reader.cpp	/^bool Reader::readArray(Token& token) {$/;"	f	class:Json::Reader
readCStyleComment	json/json_reader.cpp	/^bool OurReader::readCStyleComment() {$/;"	f	class:Json::OurReader
readCStyleComment	json/json_reader.cpp	/^bool Reader::readCStyleComment() {$/;"	f	class:Json::Reader
readComment	json/json_reader.cpp	/^bool OurReader::readComment() {$/;"	f	class:Json::OurReader
readComment	json/json_reader.cpp	/^bool Reader::readComment() {$/;"	f	class:Json::Reader
readCppStyleComment	json/json_reader.cpp	/^bool OurReader::readCppStyleComment() {$/;"	f	class:Json::OurReader
readCppStyleComment	json/json_reader.cpp	/^bool Reader::readCppStyleComment() {$/;"	f	class:Json::Reader
readFromFile	CacheManger.cc	/^void CacheManger::readFromFile()$/;"	f	class:mm::CacheManger
readNumber	json/json_reader.cpp	/^bool OurReader::readNumber(bool checkInf) {$/;"	f	class:Json::OurReader
readNumber	json/json_reader.cpp	/^void Reader::readNumber() {$/;"	f	class:Json::Reader
readObject	json/json_reader.cpp	/^bool OurReader::readObject(Token& token) {$/;"	f	class:Json::OurReader
readObject	json/json_reader.cpp	/^bool Reader::readObject(Token& token) {$/;"	f	class:Json::Reader
readString	json/json_reader.cpp	/^bool OurReader::readString() {$/;"	f	class:Json::OurReader
readString	json/json_reader.cpp	/^bool Reader::readString() {$/;"	f	class:Json::Reader
readStringSingleQuote	json/json_reader.cpp	/^bool OurReader::readStringSingleQuote() {$/;"	f	class:Json::OurReader
readToken	json/json_reader.cpp	/^bool OurReader::readToken(Token& token) {$/;"	f	class:Json::OurReader
readToken	json/json_reader.cpp	/^bool Reader::readToken(Token& token) {$/;"	f	class:Json::Reader
readTrain	SocketIO.cc	/^int SocketIO::readTrain(char * buff)$/;"	f	class:mm::SocketIO
readValue	json/json_reader.cpp	/^bool OurReader::readValue() {$/;"	f	class:Json::OurReader
readValue	json/json_reader.cpp	/^bool Reader::readValue() {$/;"	f	class:Json::Reader
read_dic	IndexProducer.cc	/^void IndexProducer::read_dic()$/;"	f	class:mm::IndexProducer
reader_	json/json_reader.cpp	/^  OurReader reader_;$/;"	m	class:Json::OurCharReader	file:
readline	SocketIO.cc	/^int SocketIO::readline(char * buff, int maxlen)$/;"	f	class:mm::SocketIO
readn	SocketIO.cc	/^int SocketIO::readn(char * buff, int len)$/;"	f	class:mm::SocketIO
ready	Acceptor.cc	/^void Acceptor::ready()$/;"	f	class:mm::Acceptor
receive	TcpConnection.cc	/^string TcpConnection::receive()$/;"	f	class:mm::TcpConnection
recoverFromError	json/json_reader.cpp	/^bool OurReader::recoverFromError(TokenType skipUntilToken) {$/;"	f	class:Json::OurReader
recoverFromError	json/json_reader.cpp	/^bool Reader::recoverFromError(TokenType skipUntilToken) {$/;"	f	class:Json::Reader
recvCycle	SocketIO.cc	/^int SocketIO::recvCycle(void *p,int len)$/;"	f	class:mm::SocketIO
recvPeek	SocketIO.cc	/^int SocketIO::recvPeek(char * buff, int len)$/;"	f	class:mm::SocketIO
rejectDupKeys_	json/json_reader.cpp	/^  bool rejectDupKeys_;$/;"	m	class:Json::OurFeatures	file:
releasePayload	json/json_value.cpp	/^void Value::releasePayload() {$/;"	f	class:Json::Value
releasePrefixedStringValue	json/json_value.cpp	/^static inline void releasePrefixedStringValue(char* value) { free(value); }$/;"	f	namespace:Json
releasePrefixedStringValue	json/json_value.cpp	/^static inline void releasePrefixedStringValue(char* value) {$/;"	f	namespace:Json
releaseStringValue	json/json_value.cpp	/^static inline void releaseStringValue(char* value, unsigned length) {$/;"	f	namespace:Json
releaseStringValue	json/json_value.cpp	/^static inline void releaseStringValue(char* value, unsigned) { free(value); }$/;"	f	namespace:Json
removeIndex	json/json_value.cpp	/^bool Value::removeIndex(ArrayIndex index, Value* removed) {$/;"	f	class:Json::Value
removeMember	json/json_value.cpp	/^bool Value::removeMember(String const& key, Value* removed) {$/;"	f	class:Json::Value
removeMember	json/json_value.cpp	/^bool Value::removeMember(const char* begin, const char* end, Value* removed) {$/;"	f	class:Json::Value
removeMember	json/json_value.cpp	/^bool Value::removeMember(const char* key, Value* removed) {$/;"	f	class:Json::Value
removeMember	json/json_value.cpp	/^void Value::removeMember(const String& key) { removeMember(key.c_str()); }$/;"	f	class:Json::Value
removeMember	json/json_value.cpp	/^void Value::removeMember(const char* key) {$/;"	f	class:Json::Value
resize	json/json_value.cpp	/^void Value::resize(ArrayIndex newSize) {$/;"	f	class:Json::Value
resolve	json/json_value.cpp	/^Value Path::resolve(const Value& root, const Value& defaultValue) const {$/;"	f	class:Json::Path
resolve	json/json_value.cpp	/^const Value& Path::resolve(const Value& root) const {$/;"	f	class:Json::Path
resolveReference	json/json_value.cpp	/^Value& Value::resolveReference(char const* key, char const* end) {$/;"	f	class:Json::Value
resolveReference	json/json_value.cpp	/^Value& Value::resolveReference(const char* key) {$/;"	f	class:Json::Value
rightMargin_	json/json_writer.cpp	/^  unsigned int rightMargin_;$/;"	m	struct:Json::BuiltStyledStreamWriter	file:
runInLoop	EventLoop.cc	/^void EventLoop::runInLoop(Functor && cb)$/;"	f	class:mm::EventLoop
runInThread	Thread.cc	/^    void runInThread()$/;"	f	struct:mm::ThreadData
send	TcpConnection.cc	/^void TcpConnection::send(const string & msg)$/;"	f	class:mm::TcpConnection
sendInLoop	TcpConnection.cc	/^void TcpConnection::sendInLoop(const string & msg)$/;"	f	class:mm::TcpConnection
set	json/json_value.cpp	/^void Value::Comments::set(CommentPlacement slot, String comment) {$/;"	f	class:Json::Value::Comments
setCloseCallback	TcpConnection.cc	/^void TcpConnection::setCloseCallback(const TcpConnectionCallback & cb)$/;"	f	class:mm::TcpConnection
setCloseCallback	TcpServer.cc	/^void TcpServer::setCloseCallback(TcpConnectionCallback && cb)$/;"	f	class:mm::TcpServer
setComment	json/json_value.cpp	/^void Value::setComment(String comment, CommentPlacement placement) {$/;"	f	class:Json::Value
setConnectionCallback	TcpConnection.cc	/^void TcpConnection::setConnectionCallback(const TcpConnectionCallback & cb)$/;"	f	class:mm::TcpConnection
setConnectionCallback	TcpServer.cc	/^void TcpServer::setConnectionCallback(TcpConnectionCallback && cb)$/;"	f	class:mm::TcpServer
setDefaults	json/json_reader.cpp	/^void CharReaderBuilder::setDefaults(Json::Value* settings) {$/;"	f	class:Json::CharReaderBuilder
setDefaults	json/json_writer.cpp	/^void StreamWriterBuilder::setDefaults(Json::Value* settings) {$/;"	f	class:Json::StreamWriterBuilder
setMessageCallback	TcpConnection.cc	/^void TcpConnection::setMessageCallback(const TcpConnectionCallback & cb)$/;"	f	class:mm::TcpConnection
setMessageCallback	TcpServer.cc	/^void TcpServer::setMessageCallback(TcpConnectionCallback && cb)$/;"	f	class:mm::TcpServer
setOffsetLimit	json/json_value.cpp	/^void Value::setOffsetLimit(ptrdiff_t limit) { limit_ = limit; }$/;"	f	class:Json::Value
setOffsetStart	json/json_value.cpp	/^void Value::setOffsetStart(ptrdiff_t start) { start_ = start; }$/;"	f	class:Json::Value
setReuseAddr	Acceptor.cc	/^void Acceptor::setReuseAddr(bool on)$/;"	f	class:mm::Acceptor
setReusePort	Acceptor.cc	/^void Acceptor::setReusePort(bool on)$/;"	f	class:mm::Acceptor
setTimer	Timer.cc	/^void Timer::setTimer(int initTime,int intervalTime)$/;"	f	class:mm::Timer
show_conf	Configuration.cc	/^void Configuration::show_conf()const$/;"	f	class:mm::Configuration
show_dict	DictProducer.cc	/^void DictProducer::show_dict()const$/;"	f	class:mm::DictProducer
show_dict	Mydict.cc	/^void Mydict::show_dict()const$/;"	f	class:mm::Mydict
show_index	IndexProducer.cc	/^void IndexProducer::show_index()const$/;"	f	class:mm::IndexProducer
show_index	Mydict.cc	/^void Mydict::show_index()const$/;"	f	class:mm::Mydict
shutdown	TcpConnection.cc	/^void TcpConnection::shutdown()$/;"	f	class:mm::TcpConnection
shutdownWrite	Socket.cc	/^void Socket::shutdownWrite()$/;"	f	class:mm::Socket
size	json/json_value.cpp	/^ArrayIndex Value::size() const {$/;"	f	class:Json::Value
skipCommentTokens	json/json_reader.cpp	/^void OurReader::skipCommentTokens(Token& token) {$/;"	f	class:Json::OurReader
skipCommentTokens	json/json_reader.cpp	/^void Reader::skipCommentTokens(Token& token) {$/;"	f	class:Json::Reader
skipSpaces	json/json_reader.cpp	/^void OurReader::skipSpaces() {$/;"	f	class:Json::OurReader
skipSpaces	json/json_reader.cpp	/^void Reader::skipSpaces() {$/;"	f	class:Json::Reader
sscanf	json/json_reader.cpp	26;"	d	file:
stackLimit_	json/json_reader.cpp	/^  size_t stackLimit_;$/;"	m	class:Json::OurFeatures	file:
stackLimit_g	json/json_reader.cpp	/^static size_t const stackLimit_g =$/;"	v	file:
start	SpellCorrectServer.cc	/^void SpellcorrectServer::start()$/;"	f	class:mm::SpellcorrectServer
start	TcpServer.cc	/^void TcpServer::start()$/;"	f	class:mm::TcpServer
start	Thread.cc	/^void Thread::start()$/;"	f	class:mm::Thread
start	Threadpool.cc	/^void Threadpool::start()$/;"	f	class:mm::Threadpool
start	Timer.cc	/^void Timer::start()$/;"	f	class:mm::Timer
start_	json/json_reader.cpp	/^    Location start_;$/;"	m	class:Json::OurReader::Token	file:
statistic	MyTask.cc	/^void MyTask::statistic()\/\/计算出下标对应的单词并存储$/;"	f	class:mm::MyTask
stop	Threadpool.cc	/^void Threadpool::stop()$/;"	f	class:mm::Threadpool
stop	Timer.cc	/^void Timer::stop()$/;"	f	class:mm::Timer
store_dict	DictProducer.cc	/^void DictProducer::store_dict(const string filepath)$/;"	f	class:mm::DictProducer
store_index	IndexProducer.cc	/^void IndexProducer::store_index()$/;"	f	class:mm::IndexProducer
strictMode	json/json_reader.cpp	/^Features Features::strictMode() {$/;"	f	class:Json::Features
strictMode	json/json_reader.cpp	/^void CharReaderBuilder::strictMode(Json::Value* settings) {$/;"	f	class:Json::CharReaderBuilder
strictRoot_	json/json_reader.cpp	/^  bool strictRoot_;$/;"	m	class:Json::OurFeatures	file:
swap	json/json_value.cpp	/^void Value::CZString::swap(CZString& other) {$/;"	f	class:Json::Value::CZString
swap	json/json_value.cpp	/^void Value::swap(Value& other) {$/;"	f	class:Json::Value
swapPayload	json/json_value.cpp	/^void Value::swapPayload(Value& other) {$/;"	f	class:Json::Value
threadFunc	Thread.cc	/^void * Thread::threadFunc(void * arg)$/;"	f	class:mm::Thread
threadFunc	Threadpool.cc	/^void Threadpool::threadFunc()$/;"	f	class:mm::Threadpool
threadNum	Thread.cc	/^__thread int threadNum=0;$/;"	m	namespace:mm	file:
throwLogicError	json/json_value.cpp	/^JSONCPP_NORETURN void throwLogicError(String const& msg) {$/;"	f	namespace:Json
throwRuntimeError	json/json_value.cpp	/^JSONCPP_NORETURN void throwRuntimeError(String const& msg) {$/;"	f	namespace:Json
toHex16Bit	json/json_writer.cpp	/^static String toHex16Bit(unsigned int x) {$/;"	f	namespace:Json
toString	TcpConnection.cc	/^string TcpConnection::toString() const$/;"	f	class:mm::TcpConnection
toStyledString	json/json_value.cpp	/^String Value::toStyledString() const {$/;"	f	class:Json::Value
tokenArrayBegin	json/json_reader.cpp	/^    tokenArrayBegin,$/;"	e	enum:Json::OurReader::TokenType	file:
tokenArrayEnd	json/json_reader.cpp	/^    tokenArrayEnd,$/;"	e	enum:Json::OurReader::TokenType	file:
tokenArraySeparator	json/json_reader.cpp	/^    tokenArraySeparator,$/;"	e	enum:Json::OurReader::TokenType	file:
tokenComment	json/json_reader.cpp	/^    tokenComment,$/;"	e	enum:Json::OurReader::TokenType	file:
tokenEndOfStream	json/json_reader.cpp	/^    tokenEndOfStream = 0,$/;"	e	enum:Json::OurReader::TokenType	file:
tokenError	json/json_reader.cpp	/^    tokenError$/;"	e	enum:Json::OurReader::TokenType	file:
tokenFalse	json/json_reader.cpp	/^    tokenFalse,$/;"	e	enum:Json::OurReader::TokenType	file:
tokenMemberSeparator	json/json_reader.cpp	/^    tokenMemberSeparator,$/;"	e	enum:Json::OurReader::TokenType	file:
tokenNaN	json/json_reader.cpp	/^    tokenNaN,$/;"	e	enum:Json::OurReader::TokenType	file:
tokenNegInf	json/json_reader.cpp	/^    tokenNegInf,$/;"	e	enum:Json::OurReader::TokenType	file:
tokenNull	json/json_reader.cpp	/^    tokenNull,$/;"	e	enum:Json::OurReader::TokenType	file:
tokenNumber	json/json_reader.cpp	/^    tokenNumber,$/;"	e	enum:Json::OurReader::TokenType	file:
tokenObjectBegin	json/json_reader.cpp	/^    tokenObjectBegin,$/;"	e	enum:Json::OurReader::TokenType	file:
tokenObjectEnd	json/json_reader.cpp	/^    tokenObjectEnd,$/;"	e	enum:Json::OurReader::TokenType	file:
tokenPosInf	json/json_reader.cpp	/^    tokenPosInf,$/;"	e	enum:Json::OurReader::TokenType	file:
tokenString	json/json_reader.cpp	/^    tokenString,$/;"	e	enum:Json::OurReader::TokenType	file:
tokenTrue	json/json_reader.cpp	/^    tokenTrue,$/;"	e	enum:Json::OurReader::TokenType	file:
token_	json/json_reader.cpp	/^    Token token_;$/;"	m	class:Json::OurReader::ErrorInfo	file:
type	json/json_value.cpp	/^ValueType Value::type() const {$/;"	f	class:Json::Value
type_	json/json_reader.cpp	/^    TokenType type_;$/;"	m	class:Json::OurReader::Token	file:
unindent	json/json_writer.cpp	/^void BuiltStyledStreamWriter::unindent() {$/;"	f	class:Json::BuiltStyledStreamWriter
unindent	json/json_writer.cpp	/^void StyledStreamWriter::unindent() {$/;"	f	class:Json::StyledStreamWriter
unindent	json/json_writer.cpp	/^void StyledWriter::unindent() {$/;"	f	class:Json::StyledWriter
unlock	MutexLock.cc	/^void MutexLock::unlock()$/;"	f	class:mm::MutexLock
unloop	EventLoop.cc	/^void EventLoop::unloop()$/;"	f	class:mm::EventLoop
useSpecialFloats_	json/json_writer.cpp	/^  bool useSpecialFloats_ : 1;$/;"	m	struct:Json::BuiltStyledStreamWriter	file:
utf8ToCodepoint	json/json_writer.cpp	/^static unsigned int utf8ToCodepoint(const char*& s, const char* e) {$/;"	f	namespace:Json
validate	json/json_reader.cpp	/^bool CharReaderBuilder::validate(Json::Value* invalid) const {$/;"	f	class:Json::CharReaderBuilder
validate	json/json_writer.cpp	/^bool StreamWriterBuilder::validate(Json::Value* invalid) const {$/;"	f	class:Json::StreamWriterBuilder
valueToQuotedString	json/json_writer.cpp	/^String valueToQuotedString(const char* value) {$/;"	f	namespace:Json
valueToQuotedStringN	json/json_writer.cpp	/^static String valueToQuotedStringN(const char* value, unsigned length) {$/;"	f	namespace:Json
valueToString	json/json_writer.cpp	/^String valueToString(Int value) { return valueToString(LargestInt(value)); }$/;"	f	namespace:Json
valueToString	json/json_writer.cpp	/^String valueToString(LargestInt value) {$/;"	f	namespace:Json
valueToString	json/json_writer.cpp	/^String valueToString(LargestUInt value) {$/;"	f	namespace:Json
valueToString	json/json_writer.cpp	/^String valueToString(UInt value) { return valueToString(LargestUInt(value)); }$/;"	f	namespace:Json
valueToString	json/json_writer.cpp	/^String valueToString(bool value) { return value ? "true" : "false"; }$/;"	f	namespace:Json
valueToString	json/json_writer.cpp	/^String valueToString(double value,$/;"	f	namespace:Json
valueToString	json/json_writer.cpp	/^String valueToString(double value,$/;"	f	namespace:Json::__anon1
wait	Condition.cc	/^void Condition::wait()$/;"	f	class:mm::Condition
waitEpollFd	EventLoop.cc	/^void EventLoop::waitEpollFd()$/;"	f	class:mm::EventLoop
wakeup	EventLoop.cc	/^void EventLoop::wakeup()$/;"	f	class:mm::EventLoop
wakeup	TaskQueue.cc	/^void TaskQueue::wakeup()$/;"	f	class:mm::TaskQueue
write	json/json_writer.cpp	/^String FastWriter::write(const Value& root) {$/;"	f	class:Json::FastWriter
write	json/json_writer.cpp	/^String StyledWriter::write(const Value& root) {$/;"	f	class:Json::StyledWriter
write	json/json_writer.cpp	/^int BuiltStyledStreamWriter::write(Value const& root, OStream* sout) {$/;"	f	class:Json::BuiltStyledStreamWriter
write	json/json_writer.cpp	/^void StyledStreamWriter::write(OStream& out, const Value& root) {$/;"	f	class:Json::StyledStreamWriter
writeArrayValue	json/json_writer.cpp	/^void BuiltStyledStreamWriter::writeArrayValue(Value const& value) {$/;"	f	class:Json::BuiltStyledStreamWriter
writeArrayValue	json/json_writer.cpp	/^void StyledStreamWriter::writeArrayValue(const Value& value) {$/;"	f	class:Json::StyledStreamWriter
writeArrayValue	json/json_writer.cpp	/^void StyledWriter::writeArrayValue(const Value& value) {$/;"	f	class:Json::StyledWriter
writeCommentAfterValueOnSameLine	json/json_writer.cpp	/^void BuiltStyledStreamWriter::writeCommentAfterValueOnSameLine($/;"	f	class:Json::BuiltStyledStreamWriter
writeCommentAfterValueOnSameLine	json/json_writer.cpp	/^void StyledStreamWriter::writeCommentAfterValueOnSameLine(const Value& root) {$/;"	f	class:Json::StyledStreamWriter
writeCommentAfterValueOnSameLine	json/json_writer.cpp	/^void StyledWriter::writeCommentAfterValueOnSameLine(const Value& root) {$/;"	f	class:Json::StyledWriter
writeCommentBeforeValue	json/json_writer.cpp	/^void BuiltStyledStreamWriter::writeCommentBeforeValue(Value const& root) {$/;"	f	class:Json::BuiltStyledStreamWriter
writeCommentBeforeValue	json/json_writer.cpp	/^void StyledStreamWriter::writeCommentBeforeValue(const Value& root) {$/;"	f	class:Json::StyledStreamWriter
writeCommentBeforeValue	json/json_writer.cpp	/^void StyledWriter::writeCommentBeforeValue(const Value& root) {$/;"	f	class:Json::StyledWriter
writeIndent	json/json_writer.cpp	/^void BuiltStyledStreamWriter::writeIndent() {$/;"	f	class:Json::BuiltStyledStreamWriter
writeIndent	json/json_writer.cpp	/^void StyledStreamWriter::writeIndent() {$/;"	f	class:Json::StyledStreamWriter
writeIndent	json/json_writer.cpp	/^void StyledWriter::writeIndent() {$/;"	f	class:Json::StyledWriter
writeString	json/json_writer.cpp	/^String writeString(StreamWriter::Factory const& factory, Value const& root) {$/;"	f	namespace:Json
writeToFile	CacheManger.cc	/^void CacheManger::writeToFile()$/;"	f	class:mm::CacheManger
writeTrain	SocketIO.cc	/^int SocketIO::writeTrain(const char * buff)$/;"	f	class:mm::SocketIO
writeValue	json/json_writer.cpp	/^void BuiltStyledStreamWriter::writeValue(Value const& value) {$/;"	f	class:Json::BuiltStyledStreamWriter
writeValue	json/json_writer.cpp	/^void FastWriter::writeValue(const Value& value) {$/;"	f	class:Json::FastWriter
writeValue	json/json_writer.cpp	/^void StyledStreamWriter::writeValue(const Value& value) {$/;"	f	class:Json::StyledStreamWriter
writeValue	json/json_writer.cpp	/^void StyledWriter::writeValue(const Value& value) {$/;"	f	class:Json::StyledWriter
writeWithIndent	json/json_writer.cpp	/^void BuiltStyledStreamWriter::writeWithIndent(String const& value) {$/;"	f	class:Json::BuiltStyledStreamWriter
writeWithIndent	json/json_writer.cpp	/^void StyledStreamWriter::writeWithIndent(const String& value) {$/;"	f	class:Json::StyledStreamWriter
writeWithIndent	json/json_writer.cpp	/^void StyledWriter::writeWithIndent(const String& value) {$/;"	f	class:Json::StyledWriter
writen	SocketIO.cc	/^int SocketIO::writen(const char * buff, int len)$/;"	f	class:mm::SocketIO
~CZString	json/json_value.cpp	/^Value::CZString::~CZString() {$/;"	f	class:Json::Value::CZString
~Condition	Condition.cc	/^Condition::~Condition()$/;"	f	class:mm::Condition
~MutexLock	MutexLock.cc	/^MutexLock::~MutexLock()$/;"	f	class:mm::MutexLock
~Socket	Socket.cc	/^Socket::~Socket()$/;"	f	class:mm::Socket
~TcpConnection	TcpConnection.cc	/^TcpConnection::~TcpConnection()$/;"	f	class:mm::TcpConnection
~Thread	Thread.cc	/^Thread::~Thread()$/;"	f	class:mm::Thread
~Value	json/json_value.cpp	/^Value::~Value() {$/;"	f	class:Json::Value
